apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: c1-app-uploader
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:eu-west-1:325436486329:certificate/ef2556f5-ca04-4aa1-aa8d-1e0304ba141d
  name: c1-app-uploader
  labels:
    app: c1-app-uploader
spec:
  type: LoadBalancer
  ports:
  - port: 443
    name: c1-app-uploader
    targetPort: 80
  selector:
    app: c1-app-uploader
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: c1-app-uploader
  name: c1-app-uploader
spec:
  replicas: 1
  selector:
    matchLabels:
      app: c1-app-uploader
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: c1-app-uploader
    spec:
      containers:
      - name: c1-app-uploader
        image: 325436486329.dkr.ecr.eu-west-1.amazonaws.com/uploader:latest
        imagePullPolicy: Always
        env:
        - name: TREND_AP_KEY
          value: $UPLOADER_KEY
        - name: TREND_AP_SECRET
          value: $UPLOADER_SECRET
        - name: TREND_AP_HELLO_URL
          value: "https://agents.de-1.application.cloudone.trendmicro.com/"
        ports:
        - containerPort: 8000
      imagePullSecrets:
      - name: $KUBERNETES_SECRET_NAME
[root@centos8 deploy-gha]# ls
deployment.yaml  deploy.yaml  Dockerfile
[root@centos8 deploy-gha]# cat deploy.yaml 
name: Deploy to ECR

on:
 
  push:
    branches: [ master ]

env:

  EKS_CLUSTER_NAME: EKS_Cluster 
  AWS_REGION: eu-west-1

jobs:
  
  build:
    
    name: Deployment
    runs-on: ubuntu-latest

    steps:

    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: uploader        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Deploy to EKS
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: 
        kubectl apply -f deployment.yaml

